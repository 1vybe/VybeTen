/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2014 Google Inc.
 */

//
//  GTLQueryVybe.h
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   vybe/v1.0
// Description:
//   Media API
// Classes:
//   GTLQueryVybe (13 custom class methods, 4 custom properties)

#if GTL_BUILT_AS_FRAMEWORK
  #import "GTL/GTLQuery.h"
#else
  #import "GTLQuery.h"
#endif

@class GTLVybeMediaMediaQuery;
@class GTLVybeMediaMediaUploadRequest;
@class GTLVybeMediaTribeCreateRequest;

@interface GTLQueryVybe : GTLQuery

//
// Parameters valid on all methods.
//

// Selector specifying which fields to include in a partial response.
@property (copy) NSString *fields;

//
// Method-specific parameters; see the comments below for more information.
//
@property (copy) NSString *tribeId;
@property (copy) NSString *userId;
@property (copy) NSString *vybeId;

#pragma mark -
#pragma mark "media" methods
// These create a GTLQueryVybe object.

// Method: vybe.media.delete
// Delete a vybe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
+ (id)queryForMediaDeleteWithVybeId:(NSString *)vybeId;

// Method: vybe.media.list_all
// Returns a list of all vybes
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaMediaListResponse.
+ (id)queryForMediaListAll;

// Method: vybe.media.search
// Search for a vybe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaMediaListResponse.
+ (id)queryForMediaSearchWithObject:(GTLVybeMediaMediaQuery *)object;

// Method: vybe.media.upload
// Upload a new vybe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
+ (id)queryForMediaUploadWithObject:(GTLVybeMediaMediaUploadRequest *)object;

#pragma mark -
#pragma mark "tribes" methods
// These create a GTLQueryVybe object.

// Method: vybe.tribes.create
// Create a new tribe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
+ (id)queryForTribesCreateWithObject:(GTLVybeMediaTribeCreateRequest *)object;

// Method: vybe.tribes.get_media
// Returns the list of Media for this tribe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaMediaListResponse.
+ (id)queryForTribesGetMediaWithTribeId:(NSString *)tribeId;

// Method: vybe.tribes.get_users
// Updates the list of users this tribe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaUsersListResponse.
+ (id)queryForTribesGetUsersWithTribeId:(NSString *)tribeId;

// Method: vybe.tribes.list_all
// Returns a list of all tribes
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaMediaListResponse.
+ (id)queryForTribesListAll;

// Method: vybe.tribes.update_followers
// Updates the list of followers for this tribe
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaUsersListResponse.
+ (id)queryForTribesUpdateFollowersWithTribeId:(NSString *)tribeId;

#pragma mark -
#pragma mark "users" methods
// These create a GTLQueryVybe object.

// Method: vybe.users.create
// Insert a new user
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
+ (id)queryForUsersCreateWithObject:(GTLVybeMediaTribeCreateRequest *)object;

// Method: vybe.users.following
// Returns a list of tribeId's this user is following
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaUsersListResponse.
+ (id)queryForUsersFollowingWithUserId:(NSString *)userId;

// Method: vybe.users.media
// Returns a list of vybeId's this user uploaded
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaMediaListResponse.
+ (id)queryForUsersMediaWithUserId:(NSString *)userId;

// Method: vybe.users.tribes
// Returns a list of tribeId's for this user is in
//  Authorization scope(s):
//   kGTLAuthScopeVybeUserinfoEmail
// Fetches a GTLVybeMediaTribesListResponse.
+ (id)queryForUsersTribesWithUserId:(NSString *)userId;

@end
